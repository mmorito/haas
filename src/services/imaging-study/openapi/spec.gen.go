// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8yUwU7bQBCGX2U1J5BMDO3NqAdKLj5UVKSIA8phsSfJIHvX7IyDUsvvXu06Dk5iVYBa",
	"iVNi78w/88986wYyW1bWoBGGpGkjILOwkDQgJAVCAiutOaZSL8ksz1jqfAMRrNExWQNJ/08ZK4pRoI3A",
	"Vmh0RZDA18n55AIiqLSsvDzE64vYuqU29FsLWcNxM3xMp22cU2bLmViHPqGyLP43R84cVdIVvXaoBdV0",
	"F6qufqYqC29ZaWXwRU3T65sfisPpC8mKjJIVqko7NKJyLZpRJhDadV31fCf9qhy6d7pEQceQPDRAvgPv",
	"CCIwuvQz2vcAETh8rslhDom4GiPgbIWlDmPdVD6DxZFZQtvOu2Bk+W7zjY/IrBE0wbWuqoKyIBs/sbfe",
	"DKQq51sXwjDaraN0OlIlgtepjga0w5YfBloHmfOoz7SPT5gJtPup3m14wZU13DX25fz8XbZGCuxv/0px",
	"nWXIvKgL1ZeaBBNcl6V2m1dEAgnDZYpe+jVC2hE980DP0K0pQ5h7iTcg6m/BdurjfHZMpoZFmww50BlI",
	"5C2WtDvSzDYjLZgHSlW4YbtzVRt6rlFRjkZoQehYnczu0unpMbndjnrhT8Nt4Gd/wwvrSi2QwCMZv63o",
	"SP2TQnW415PZr5v7s9vZ6b8FK24CBX2du3Taeg9LHEHtFsURrlGFgoE0h1I7w0oXxQC0wTdwSWs0HWnH",
	"GPWCs+2n/r9SFI0KHrp/P5h/JaWsC6FKO4kdFv7mXSov8u2I2ssPYPsBqg5WeHJ/Nb15G1ReBt26303t",
	"CkggBj+DbWbTz3RMoZ23fwIAAP//XLCaGAAIAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
